PROC SQL;
CREATE TABLE WORK.USDT_RATES AS 
   SELECT
		BASE_CURRENCY
        , QUOTE_CURRENCY
        , PRICE
      FROM WORK.RATES
      WHERE QUOTE_CURRENCY = 'USDT';
QUIT;

DATA TRANS_VALUE;
	LENGTH TRANS_TYPE $25;
	INPUT TRANS_TYPE $ REVENUE_RATE;
	DATALINES;
CRYPTO_PURCHASE 0.02
CRYPTO_SALE 0.02
CRYPTO_SWAP 0.01
LEMON_CARD_PAYMENT 0.05 
;
RUN;


/* RECODIFICO LA DATE VALUE */
PROC SQL;
CREATE TABLE WORK.TRANSACTIONS_2 AS
	SELECT
		t1.*
		, SUBSTR(t1.CREATEDAT,1,4)||SUBSTR(t1.CREATEDAT,6,2)||SUBSTR(t1.CREATEDAT,9,2) AS DATE
		, SUBSTR(t1.CREATEDAT,1,4)||SUBSTR(t1.CREATEDAT,6,2) AS YEAR_MONTH
		, SUBSTR(t1.CREATEDAT,1,4) AS YEAR
		, (CASE WHEN t1.CURRENCY NOT IN ('USDT', 'DAI') THEN t1.AMOUNT*t2.PRICE
				WHEN t1.CURRENCY IN ('USDT', 'DAI') THEN t1.AMOUNT
				ELSE 999999 END) AS VALUE_USDT
		, t3.REVENUE_RATE
		, CALCULATED VALUE_USDT*t3.REVENUE_RATE AS TRANS_REV_USDT
	FROM WORK.TRANSACTIONS t1
	LEFT JOIN WORK.USDT_RATES t2
		ON t1.CURRENCY = t2.BASE_CURRENCY
	LEFT JOIN WORK.TRANS_VALUE t3
		ON t1.TRANSACTION_TYPE = t3.TRANS_TYPE
	WHERE t1.STATE = 'DONE' AND t1.TRANSACTION_TYPE NOT IN ('VIRTUAL_DEPOSIT', 'VIRTUAL_WITHDRAWAL', 'CASH_IN_CRYPTO') AND t1.CURRENCY <> 'MONEY'
	ORDER BY t1.USER_ID, CALCULATED DATE ASC
	;
QUIT;
/* 2.451 PROFITABLE TRANSACTIONS */


/* PRIMER TRANSACCIÓN DEL CLIENTE */
PROC SQL;
CREATE TABLE WORK.FIRTS_TRANS AS
	SELECT
		USER_ID
		, MIN(YEAR_MONTH) AS YM_Fisrt_Trans
	FROM WORK.TRANSACTIONS_2
	GROUP BY USER_ID
	;
QUIT;

/* TABLA CON FLAG_TRANSACCIONAL, PERÍODO Y ALTA */

PROC SQL;
CREATE TABLE WORK.TRANSACTIONS_3 AS
	SELECT
		t1.USER_ID
		, t1.YEAR_MONTH
		, t2.YM_Fisrt_Trans
		, MAX((CASE WHEN t1.YEAR_MONTH > YM_Fisrt_Trans THEN 1
				ELSE 0 END)) AS ACTIVE
		, SUM((CASE WHEN t1.YEAR_MONTH > YM_Fisrt_Trans THEN TRANS_REV_USDT
				ELSE 0 END)) AS TRANS_REV_USDT
	FROM WORK.TRANSACTIONS_2 t1
	LEFT JOIN WORK.FIRTS_TRANS t2
		ON t1.USER_ID = t2.USER_ID
	GROUP BY t1.USER_ID, t1.YEAR_MONTH, t2.YM_Fisrt_Trans
	;
QUIT;


/* ALTAS POR MES */
PROC SQL;
CREATE TABLE WORK.SUM_ALTAS AS
	SELECT
		YM_Fisrt_Trans
		, COUNT(DISTINCT USER_ID) AS N_Fisrt_Trans
	FROM WORK.FIRTS_TRANS
	GROUP BY YM_Fisrt_Trans
	;
QUIT;

/* TRANSACCIONES POST ALTA POR MES */
PROC SQL;
CREATE TABLE WORK.SUM_TRANS AS
	SELECT
		YEAR_MONTH
		, SUM(ACTIVE) AS N_TRANS
		, SUM(TRANS_REV_USDT) AS TRANS_REV_USDT
	FROM WORK.TRANSACTIONS_3
	GROUP BY YEAR_MONTH
	;
QUIT;

/* JOIN PARA CHURN */
PROC SQL;
CREATE TABLE WORK.JOIN AS
	SELECT 
		t1.YEAR_MONTH
		, t2.N_Fisrt_Trans
		, t1.N_TRANS
		, t1.TRANS_REV_USDT AS Revenue
	FROM WORK.SUM_TRANS t1
	LEFT JOIN WORK.SUM_ALTAS t2
		ON t1.YEAR_MONTH = t2.YM_Fisrt_Trans
	;
QUIT;

data ACUM;
set JOIN;
if first.YEAR_MONTH then ACUM_FIRST_TRANS=0;
ACUM_FIRST_TRANS+N_Fisrt_Trans;
run;